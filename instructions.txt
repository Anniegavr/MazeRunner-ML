Before anything:
We strongly recommend that you have an IDE such as PyCharm to run the projects, since PyCharm offers many solutions in one place.

Instructions for Maze Generation and Q-Learning Agent Evaluation
Step 1: Maze Generation

    Generate Mazes Automatically:
        Open maze_generator.py and run the script.
        Set the desired minimum (MIN) and maximum (MAX) maze sizes. The script will generate mazes within the specified size range.

    Generate Mazes Manually:
        Use the manually_create_maze() function to create a specific maze.
        Parameters:
            width: Width of the maze.
            height: Height of the maze.
            algorithm_name: Name of the algorithm to use for maze generation.
            start: Coordinates of the starting point (S).
            exit: Coordinates of the exit point (E).

    Important Note on the Binary Tree Algorithm:
        The Binary Tree algorithm may produce mazes with no valid path between S and E.
        To ensure validity, use the process_mazes(input_dir, output_dir) function:
            input_dir: Directory containing the generated mazes.
            output_dir: Directory where validated and fixed mazes will be saved.

Step 2: Test Q-Learning on a Specific Maze

    Open Q_learning.py and locate the __name__ == "__main__" section.

    Configure the following variables:
        maze_file: Set the path to the maze file you want to test.
        episodes(within the agent.train() method): Define the number of episodes for training.
        num_runs: Specify the number of runs for evaluation.

    Run the script to observe and print the agent's performance results for the specified maze.

Step 3: Evaluate Q-Learning on Multiple Mazes

    Open main.py and locate the __name__ == "__main__" section.

    Use the process_all_mazes() function to evaluate all generated mazes.
        Parameters:
            input_dir: Directory containing the generated mazes.
            csv_path: Full path to the CSV file where results will be saved (including folder and filename).
            runs: Number of runs for each maze.
            episodes: Number of episodes per run.

    Execution Details:
        Performance data is saved to the CSV file during runtime.
        Warning: Running the script will overwrite existing data in the specified CSV file. Ensure you back up or use a different file if needed.

Running the exploratory data analysis:
1. Go into the EDA folder and open the Jupyter Notebook with an appropriate environment / tool. PyCharm usually offers to install the engine itself when detecting such files.
2. Ensure you have run the cells in the order they are created.

Key Notes:

    Ensure all directories and file paths are correctly specified before running the scripts.
    Always validate mazes generated with the Binary Tree algorithm to avoid issues during Q-learning evaluation.
    For detailed debugging or analysis, check the printed logs during script execution.
