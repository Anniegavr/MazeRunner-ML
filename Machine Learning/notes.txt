=== Maze Generator === 

1. Pentru a crea maze-urile am ales algoritmul Depth-first search (DFS) intrucat 
   in comparatie cu alte algoritmuri in testare si practica DFS se descurca cel mai bine.
   Unicul minus este ca indiferent de marime toate maze-urile sunt uniforme. 
   Practic acceasi densitate. De exemplu, grosimea peretilor este permanent de o 
   singura unitate. Nu sunt pereti mai grosi sau path-uri mai deschise. 

2. In momentul crearii maze-urilor inital se putea de lasat Start point si Exit point
   sa fie in pozitii random, dar in asa mod distanta dintre start si exit poate fie
   generate la cativa pasi unul de altul. Ca sa pastram relevanta fiecarui maze, 
   folosim functia optimal_distance, care in dependenta de marimea maze-ului, creaza
   o distanta optimala intre Start point si Exit point

=== Utilities ===

1. In utils.py introducem algoritmul A* intrucat in comparatie cu dijkstra algorithm,
   A* este mai efectiv si mai rapid. A* va fi folosit pentru depistarea "the shortest path",
   pe care Q-learning agent va trebui sa o gaseasca aswell.
