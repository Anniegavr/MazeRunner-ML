import pygame
import sys

pygame.init()

pygame.display.set_caption('Mazer')
#variabilele ce definesc rezolutia ferestrei cu numele "Mazer"
width=int(input())
height=int(input())

maze=[
["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"],
["#",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".","#",".",".",".",".",".",".",".","#",".",".",".","#"],
["#",".","#","#","#","#","#",".","#","#","#","#","#",".","#","#","#",".","#",".","#",".","#","#","#",".","#",".","#",".","#"],
["#",".",".",".",".",".","#",".","#",".",".",".",".",".","#",".","#",".",".",".","#",".",".",".","#",".","#",".","#",".","#"],
["#",".","#","#","#",".","#",".","#",".","#","#","#","#","#",".","#","#","#","#","#","#","#",".","#",".","#",".","#",".","#"],
["#",".",".",".","#",".","#",".","#",".","#",".",".",".","#",".",".",".","#",".",".",".",".",".","#","S",".",".","#",".","#"],
["#",".","#","#","#",".","#",".","#",".","#",".","#",".","#",".","#",".","#",".","#","#","#","#","#","#","#","#","#",".","#"],
["#",".","#",".",".",".","#",".","#",".",".",".","#",".","#",".","#",".","#",".",".",".","#",".",".",".","#",".",".",".","#"],
["#",".","#",".","#","#","#","#","#","#","#","#","#",".","#",".","#",".","#","#","#",".","#",".","#",".","#",".","#","#","#"],
["#",".","#",".",".",".",".",".",".",".",".",".",".",".","#",".","#",".",".",".","#",".","#",".","#",".","#",".","#",".","#"],
["#",".","#","#","#","#","#","#","#","#","#","#","#","#","#",".","#","#","#","#","#",".","#",".","#","#","#",".","#",".","#"],
["#",".",".",".","#",".",".",".",".",".","#",".",".",".",".",".",".",".","#",".",".",".","#",".",".",".",".",".","#",".","#"],
["#","#","#",".","#",".","#","#","#",".","#","#","#","#","#",".","#",".","#",".","#","#","#","#","#",".","#","#","#",".","#"],
["#",".",".",".","#",".","#",".",".",".",".",".",".",".","#","E","#",".","#",".",".",".",".",".","#",".","#",".",".",".","#"],
["#",".","#","#","#",".","#","#","#","#","#","#","#",".","#","#","#",".","#","#","#","#","#",".","#",".","#",".","#",".","#"],
["#",".",".",".","#",".","#",".",".",".","#",".",".",".",".",".",".",".","#",".",".",".",".",".","#",".",".",".","#",".","#"],
["#","#","#",".","#",".","#",".","#",".","#","#","#","#","#","#","#",".","#",".","#","#","#","#","#","#","#","#","#",".","#"],
["#",".",".",".","#",".",".",".","#",".",".",".","#",".","#",".",".",".","#",".","#",".",".",".",".",".",".",".","#",".","#"],
["#",".","#","#","#","#","#","#","#","#","#",".","#",".","#",".","#","#","#",".","#",".","#","#","#","#","#",".","#",".","#"],
["#",".","#",".",".",".",".",".","#",".",".",".","#",".",".",".","#",".","#",".","#",".","#",".",".",".","#",".","#",".","#"],
["#",".","#","#","#",".","#",".","#",".","#","#","#","#","#",".","#",".","#",".","#",".","#",".","#",".","#",".","#",".","#"],
["#",".",".",".","#",".","#",".",".",".","#",".",".",".","#",".",".",".","#",".","#",".",".",".","#",".","#",".","#",".","#"],
["#","#","#",".","#",".","#","#","#","#","#",".","#",".","#","#","#","#","#",".","#","#","#","#","#","#","#",".","#",".","#"],
["#",".","#",".","#",".","#",".",".",".",".",".","#",".",".",".",".",".","#",".",".",".",".",".",".",".","#",".","#",".","#"],
["#",".","#",".","#",".","#",".","#","#","#","#","#","#","#","#","#",".","#","#","#","#","#","#","#",".","#",".","#",".","#"],
["#",".",".",".","#",".",".",".","#",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".","#",".","#",".","#"],
["#",".","#","#","#","#","#","#","#",".","#","#","#","#","#","#","#",".","#",".","#","#","#","#","#","#","#",".","#",".","#"],
["#",".","#",".",".",".",".",".","#",".","#",".","#",".",".",".",".",".","#",".","#",".",".",".",".",".","#",".",".",".","#"],
["#",".","#",".","#","#","#",".","#",".","#",".","#","#","#","#","#","#","#",".","#",".","#","#","#","#","#",".","#","#","#"],
["#",".",".",".","#",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".","#"],
["#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"]
]
#definirea "paginii"/suprafetei principale,cu culoare alba 
screen=pygame.display.set_mode((width, height))
screen.fill('White')
#definirea variabilei de timp,ce are rolul de a pune cap la frames per second (FPS)
clock=pygame.time.Clock()

while True:
#blocul de cod ce permite inchiderea ferestrei python "Mazer"
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            pygame.quit()
            sys.exit("Session Closed")
#loopul ce transleateaza variabila maze in culori pe screen
    for index_column,columns in enumerate(maze):
        for index_row,rows in enumerate(maze[index_column]):
            #variabila ce determina inaltimea fiecarui patrulater colorat,ce determina diferite elemente,ca peretii("#"), inceputul("S"), iesirea("E"),si pozitia modelului("P") (patrat daca fereastra e patrata,dreptunghiulara in alte cazuri)
            height_element=height/len(maze)
            #variabila ce determina lungimea patrulaterelor mentionate
            width_element=width/len(maze[len(maze)-1])
            #lista ce storeaza pozitia curenta a modelului 
            P=[index_column,index_row]
            #blocul de cod ce translateaza "#" ca patrulatere stabile negre
            if maze[index_column][index_row]=="#":
                #variabila (exprimata printr-o suprafata non-principala) ce stocheaza culoarea respectiva elementului din variabila maze
                displayed_element=pygame.Surface((width_element,height_element))
                #functia ce,efectiv,ii defineste culoarea
                displayed_element.fill("Black")
                #functia ce pune suprafata non-principala displayed_element pe suprafata principala screen
                screen.blit(displayed_element,((index_row*width_element),(index_column*height_element)))
            #blocul de cod ce translateaza "S" ca patrulater instabil rosu,fiind capabil de a fi albastru cand modelul de-abia incepe
            if maze[index_column][index_row]=="S":
                S=[index_column,index_row]
                displayed_element=pygame.Surface((width_element,height_element))
                if P[0:2]==S[0:2]:
                    displayed_element.fill("Blue")
                else:
                    displayed_element.fill("Red")
                screen.blit(displayed_element,((index_row*width_element),(index_column*height_element)))
            #blocul de cod ce defineste "E" ca un patrulater stabil verde
            if maze[index_column][index_row]=="E":
                E=[index_column,index_row]
                displayed_element=pygame.Surface((width_element,height_element))
                if P[0:2]==E[0:2]:
                    sys.exit("Exit Achieved")
                displayed_element.fill("Green")
                screen.blit(displayed_element,((index_row*width_element),(index_column*height_element)))
            #defineste pozitia unde se afla "P" ca un patrulatet albastru 
            if maze[index_column][index_row]=="P":
                displayed_element=pygame.Surface((width_element,height_element))
                displayed_element.fill("Blue")
                screen.blit(displayed_element,((index_row*width_element),(index_column*height_element)))
            #blocul ce asigura ca locurile fara elemente sunt albe
            if maze[index_column][index_row] not in ["P","S","E","#"]:
                displayed_element=pygame.Surface((width_element,height_element))
                displayed_element.fill("White")
                screen.blit(displayed_element,((index_row*width_element),(index_column*height_element)))
            #blocul de cod ce creaza ciclul de revenire la punctul de inceput la esuarea de a ajunge la "E"
            if maze[P[0]:P[1]]=="#":
                P[0:2]=S[0:2]
                maze[S[0],S[1]]="P"
    #asigura updatarea la fiecare "frame" a imaginii
    pygame.display.update()
    #setarea FPS-ului la 30
    clock.tick(30)
